<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[对网站进行全方位优化！焕然一新喔～]]></title>
    <url>%2F2018%2F04%2F13%2F%E5%AF%B9%E7%BD%91%E7%AB%99%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%96%B9%E4%BD%8D%E4%BC%98%E5%8C%96%EF%BC%81%E7%84%95%E7%84%B6%E4%B8%80%E6%96%B0%E5%96%94%EF%BD%9E%2F</url>
    <content type="text"><![CDATA[前言最近学习一些信息安全和计算机网络方面的知识，知道了http和https的差距，现在全网各大网站和平台都在进行全站https化，所以我准备把我的fuujiro’s land也实现一波全站https化。除了这个之外，我也打算对我的blog进行SEO优化。SEO优化这是门大学问，不论是我这样的小菜鸡blog，还是那些大厂，都会试图让自家的产品和网站出现在搜索引擎最靠前的位置，SEO优化大概就是在干这样一件事～ 1. 实现全站https化1.1 所需要的工具和基础： 已搭建好的hexo blog cloudfare账户 注意： 如果你的hexo blog并没有自己额外购买的独立域名如fuujiro.com，在使用GitHub Pages自带的yourname.github.io，那么其实你是不需要进行手动https，因为*GitHub Pages自带https优化了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vim-蓝色星球迄今为止最强大的编辑器（持续更新]]></title>
    <url>%2F2018%2F03%2F10%2Fvim-%E8%93%9D%E8%89%B2%E6%98%9F%E7%90%83%E8%BF%84%E4%BB%8A%E4%B8%BA%E6%AD%A2%E6%9C%80%E5%BC%BA%E5%A4%A7%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[1. 故事 - “编辑器之神”为什么Vim被称为编辑器之神？话说啊，远古时候，有两大神仙，地上很多猿类大多分成两派，一部分仰慕Vim大神，另一部分崇拜Emacs大仙，这两派互相挖苦比较，只相信自己的信仰之神是最强大的！我呢，暂时站Vim神的，不排除以后叛变啦！ 好了，正经说话吧！高校里教学c语言时，应该是用的VC++6.0 or VS2010，这两个是编辑器嘛？当然，不是的！他们都是集成开发环境（IDE，Integrated Development Environment）,而Vim才是编辑器，与vim一起称作编辑器还有啥子呢？比如，Emacs（Vim在这个世界上的最强大对手）,VS code（Microsoft推出的开源编辑器，是我最近使用的最频繁的编辑器，可以说面对学习曲线陡峭的Vim来说，VS code是最容易上手的编辑器，我现在在写的这篇blog就是用VS code写的，插件十分丰富，除了由于GUI界面的存在，可能在内存上稍高于Vim，但比起鬼畜的Atom来说，那是好到不知道哪里去了的存在）,Atom（Google推出的开源编辑器，同样因为开源的原因，插件十分丰富）,Sublime Text（前端engineer一定经历过的编辑器，插件丰富，性能极优）等等…… 好了，你现在肯定会问我，为啥我这次blog只介绍Vim呢？因为，Vim难学啊！这里有一张网上嘲讽几大编辑器的学习曲线～ 2. 学习Vim能给你带来什么？从图上我们能看出，vim（vi）的学习曲线入门是十分陡峭的，Emacs的略显鬼畜2333～！那，学习Vim对于我来说，到底有什么什么好处呢？我在刚刚学习Vim时，也是有抱着这个疑惑的，后来总是强迫自己去学+在网上了解Vim，我觉得学习对你可能会有这些好处： 熟悉命令行工具：Vim是在终端（Terminal）上运行的编辑器，学习Vim无疑你会在命令行下进行频繁操作，而命令行工具对于程序员来说，是十分重要的！也许大部分同学的开发环境大部分还是Windows，使用命令行工具的机会很少！但是以后科研or工作，开发平台就不一定是Windows了，也不一定会有带图形界面的开发工具给你使用。比如： 你科研跑TensorFlow，进行深度学习方面的科研，大概率会需要在linux上跑；做机器学习离不开Linux～我最近在做计算机视觉（Computer Vision）的研究，小方向现在做的是对机械臂进行视觉定位，然而这个机械臂的ROS操作工具，就必须在Linux下进行~～macOS&amp;Windows都没提供~~ 你是EE爱好者（robot开发方向的爱好者），而ROS (Robot Operating System, 机器人操作系统) 恰恰只提供给你Linux的开发工具（且只保证Ubuntu（Linux的一个发行版）能够完美兼容），你作为机器人方向开发者，无法避免命令行工具的使用 除了科研界，工程界对于命令行工具的使用不要太多！各大互联网的大厂的每一个开发岗offer，无论你是c/c++/java/python/c#/前端/运维等，哪个岗位要求都会有这么一句“熟悉使用命令行操作工具”or“熟悉shell脚本语言编程”，可以说，使用命令行工具是一位合格的计算机专业大学生应该具有的。 Vim具有其他编辑器不具有的与生俱来的特殊功能，比如轻松运用SSH（SSH指：. Secure Shell（缩写：SSH），即“安全壳协议”，一项计算机上的安全协议）；Vim内存占用很低，对于开发配置要求极低，比起具有图形界面的VS code，Atom，Sublime来说，可以说能开机的电脑都能顺溜地跑Vim～！ 最后一个：Vim能帮助乌干达的贫苦儿童，这是个梗2333～！不过，认真讲哦～你用Vim写代码，是在帮助世界上的其他小孩子呢！还有什么理由，不好好写代码233～！ 相信前面的大串理由，你一定拒绝不了Vim的诱惑，不如和我一起来学习Vim工具吧～啦啦啦～！ 3. Vim介绍以及如何入门3.1 Vim和Vi的关系通过搜索引擎了解一下，就简单黏上来了！自己写的没有这么全面～123456789101112Vim和Vi都是多模式编辑器，不同的是vim 是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。vim的这些优势主要体现在以下几个方面：1、多级撤消我们知道在vi里，按`u`只能撤消上次命令，而在vim里可以无限制的撤消。2、易用性vi只能运行于unix中，而vim不仅可以运行于unix,windows ,mac等多操作平台。3、语法加亮vim可以用不同的颜色来加亮你的代码。4、可视化操作就是说vim不仅可以在终端运行，也可以运行于x window、 mac os、 windows。5、对vi的完全兼容某些情况下，你可以把vim当成vi来使用。 所以，我们通常就把Vim包括了Vi啦～！ 3.2 Vim安装按道理来说，现如今的操作系统（除Windows）都已经自带好了Vim。为了避免古老版本只安装Vi的gg情况，我们可以先敲1$ vim -version 来确定计算机是否已经安装好了Vim，一般出现的结果就是：12fuujiro-Mac:~ fuujiro$ vim -versionVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Jul 26 2017 19:10:24) 如上结果的话，你的计算机就已经安装好了Vim，版本是8.0。当然如果提示command not found，那也不慌，我们装上就好： Linux用户： 因为Linux存在两大派系，Debian和Redhat，对于不同派系，安装命令也不相同。 1234ubuntu系统（基于Debian）：普通用户下输入命令：sudo apt-get install vim-gtkcentos系统（基于Redhat）：普通用户下输入命令：yum -y install vim* macOS用户： macOS是自带Vim的，但由于随系统版本的原因，可能版本落后，那就讲一下Vim的升级吧～！ 我是推荐用Homebrew（Homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程）来升级的。 安装Homebrew 1$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装or升级Vim 1234安装Vim$ brew install vim升级Vim$ brew update vim Windows用户 Windows因为不是*nix类系统，所以不会自带Vim，不过已经有大牛开发出了vim在Windows上的编辑器-gvim gvim+w7+vundle安装教程上面这个文章清晰的解释了每一步，跟着做就好。 3.3 Vim入门3.3.1 vim的基础模式在使用vim时，主要你会在两个模式下操作： 正常（normal）模式：任何其它模式中都可以通过键盘上的 Esc 键回到正常模式。在这个模式下可以进行命令（commmand）模式操作（按:进入）。例如，wq是保存并退出，q!是强制退出不保存。 输入（insert）模式，输入文本时使用；在正常模式下键入“i”（insert）或“a”（append）即可进入插入模式。这时候一般进行文本编辑工作，例如写代码。 当然除了这两种模式，还有可视（visual）模式：用于选定文本块；可以在正常模式下输入“v”（小写）来按字符选定，输入“V”（大写）来按行选定，或输入“Ctrl-V”来按方块选定。主要的话，还是上面那2种模式用的比较多。 3.3.2 vim的基本操作你如果是第一次接触命令行，可以在打开终端（open terminal），敲下vimtutor然后按下回车，就可以看到（如下图） 这是vim的学习文档，文档语言取决于你的系统语言，所以不会英语的小伙伴也不必害怕学习vim，毕竟中文文档也是挺丰富的，不过我还是推荐学习好英语的。 好，现在默认大家都已经跟着vimtutor过了一遍了，那再复现一下文档里的一些主要的操作。 注意： 首先是控制光标移动的方向键，依然还是可以用上下左右键的，不过vim发明者的本意是提高使用者的打字效率，所以推荐h,j,k,l这4个键分别，这样你的双手就不用离开主键盘区了，完完全全的效率工具。当然，刚刚开始使用时，你会觉得有点变扭，不过熟悉后你肯定会赞成我这句话的。 在插入模式下按:键就可以进入命令模式；在命令模式下按i就可以进入插入模式。在插入模式下，输入wq可以保存并退出文件，按q!是强制退出不保存。如果有需要保存的路径，那么就w+空格+保存文件的路径。 总结的详细操作： 删除字符要删除一个字符，只需要将光标移到该字符上按下”x”。 删除一行删除一整行内容使用dd命令。删除后下面的行会移上来填补空缺。 删除换行符在Vim中你可以把两行合并为一行，也就是说两行之间的换行符被删除了：命令是J。 撤销如果你误删了过多的内容。显然你可以再输入一遍，但是命令u 更简便，它可以撤消上一次的操作。 重做如果你撤消了多次，你还可以用CTRL-R(重做)来反转撤消的动作。换句话说，它是对撤消的撤消。撤消命令还有另一种形式，U命令，它一次撤消对一行的全部操作。第二次使用该命令则会撤消前一个U的操作。用u和CTRL-R你可以找回任何一个操作状态。 追加i命令可以在当前光标之前插入文本。a命令可以在当前光标之后插入文本。o命令可以在当前行的下面另起一行，并使当前模式转为Insert模式。O命令(注意是大写的字母O)将在当前行的上面另起一行。 使用命令计数假设你要向上移动9行。这可以用kkkkkkkkk或9k来完成。事实上，很多命令都可以接受一个数字作为重复执行同一命令的次数。比如刚才的例子，要在行尾追加三个感叹号，当时用的命令是a!!!。另一个办法是用3a!命令。3说明该命令将被重复执行3次。同样，删除3个字符可以用3x。指定的数字要紧挨在它所要修饰的命令前面。 退出要退出Vim，用命令ZZ。该命令保存当前文件并退出Vim。 放弃编辑丢弃所有的修改并退出，用命令:q!。用:e!命令放弃所有修改并重新载入该文件的原始内容。 以Word为单位的移动使用w命令可以将光标向前移动一个word的首字符上；比如3w将光标向前移动3个words。b命令则将光标向后移动到前一个word的首字符上。e命令会将光标移动到下一个word的最后一个字符。命令ge，它将光标移动到前一个word的最后一个字符上。、 移动到行首或行尾$命令将光标移动到当前行行尾。如果你的键盘上有一个键，它的作用也一样。^命令将光标移动到当前行的第一个非空白字符上。0命令则总是把光标移动到当前行的第一个字符上。键也是如此。$命令还可接受一个计数，如1$会将光标移动到当前行行尾，2$则会移动到下一行的行尾，如此类推。”0”命令却不能接受类似这样的计数，命令^前加上一个计数也没有任何效果。 移动到指定字符上命令fx在当前行上查找下一个字符x（向右方向），可以带一个命令计数F命令向左方向搜索。tx命令形同fxs命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。提示：t意为To。该命令的反方向版是Tx。这4个命令都可以用;来重复。以,也是重复同样的命令，但是方向与原命令的方向相反。 以匹配一个括号为目的移动用命令%跳转到与当前光标下的括号相匹配的那一个括号上去。如果当前光标在(上，它就向前跳转到与它匹配的)，如果当前在)上，它就向后自动跳转到匹配的(上去. 移动到指定行用G命令指定一个命令计数，这个命令就会把光标定位到由命令计数指定的行上。比如33G就会把光标置于第33行上。没有指定命令计数作为参数的话, G会把光标定位到最后一行上。gg命令是跳转到第一行的快捷的方法。另一个移动到某行的方法是在命令%之前指定一个命令计数比如50%将会把光标定位在文件的中间， 90%跳到接近文件尾的地方。命令H,M,L,分别将光标跳转到第一行，中间行，结尾行部分。 告诉你当前的位置使用CTRL-G命令。set number在每行的前面显示一个行号。相反关闭行号用命令:set nonumber。:set ruler在Vim窗口的右下角显示当前光标位置。 滚屏CTRL-U显示文本的窗口向上滚动了半屏。CTRL-D命令将窗口向下移动半屏。一次滚动一行可以使用CTRL-E(向上滚动)和CTRL-Y(向下滚动)。要向前滚动一整屏使用命令CTRL-F。另外CTRL-B是它的反向版。zz命令会把当前行置为屏幕正中央，zt命令会把当前行置于屏幕顶端，zb则把当前行置于屏幕底端. 简单搜索/string命令可用于搜索一个字符串。要查找上次查找的字符串的下一个位置,使用n命令。如果你知道你要找的确切位置是目标字符串的第几次出现，还可以在n之前放置一个命令计数。3n会去查找目标字符串的第3次出现。?命令与/的工作相同，只是搜索方向相反。N命令会重复前一次查找，但是与最初用/或?指定的搜索方向相反。如果查找内容忽略大小写，则用命令set ignorecase, 返回精确匹配用命令set noignorecase。 在文本中查找下一个word把光标定位于这个word上然后按下*键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。#命令是*的反向版。还可以在这两个命令前加一个命令计数:3*查找当前光标下的word的第三次出现。 查找整个word如果你用/the来查找Vim也会匹配到there。要查找作为独立单词的the使用如下命令：/the\&gt;。\&gt;是一个特殊的记法，它只匹配一个word的结束处。近似地，\&lt;匹配到一个word的开始处。这样查找作为一个word的the就可以用:/\。 高亮显示搜索结果开启这一功能用:set hlsearch，关闭这一功能：:set nohlsearch。如果只是想去掉当前的高亮显示，可以使用下面的命令：:nohlsearch(可以简写为noh)。 匹配一行的开头与结尾^ 字符匹配一行的开头。$字符匹配一行的末尾。所以/was$\只匹配位于一行末尾的单词was，所以”/^was”只匹配位于一行开始的单词was。 匹配任何的单字符.这个字符可以匹配到任何字符。比如c.m可以匹配任何前一个字符是c，后一个字符是m的情况，不管中间的字符是什么。 匹配特殊字符放一个反斜杠在特殊字符前面。如果你查找ter。，用命令/ter\。 使用标记当你用G命令从一个地方跳转到另一个地方时，Vim会记得你起跳的位置。这个位置在Vim中是一个标记。使用命令` 可以使你跳回到刚才的出发点。 命令可以在两点之间来回跳转。CTRL-O命令是跳转到你更早些时间停置光标的位置(提示:O意为older).CTRL-I则是跳回到后来停置光标的更新的位置(提示：I在键盘上位于O前面)。 注:使用CTRL-I` 与按下键一样。 具名标记命令ma将当前光标下的位置名之为标记a。命令：”:marks”用来查看标记的列表。命令delm！删除所有标记。 操作符命令和位移dw命令可以删除一个word，d4w命令是删除4个word，依此类推。类似有d2e、d$。此类命令有一个固定的模式：操作符命令+位移命令。首先键入一个操作符命令。比如d是一个删除操作符。接下来是一个位移命。比如w。这样任何移动光标命令所及之处，都是命令的作用范围。 改变文本操作符命令是c，改变命令。它的行为与d命令类似，不过在命令执行后会进入Insert模式。比如cw改变一个word。或者，更准确地说，它删除一个word并让你置身于Insert模式。cc命令可以改变整行。不过仍保持原来的缩进。c$改变当前光标到行尾的内容。快捷命令： x 代表dl (删除当前光标下的字符) X 代表dh (删除当前光标左边的字符) D 代表d$ (删除到行尾的内容) C 代表c$ (修改到行尾的内容) s 代表cl (修改一个字符) S 代表cc (修改一整行)命令3dw和d3w都是删除3个word。第一个命令3dw可以看作是删除一个word的操作执行3次；第二个命令d3w是一次删除3个word。这是其中不明显的差异。事实上你可以在两处都放上命令记数，比如，3d2w是删除两个word，重复执行3次，总共是6个word。 替换单个字符r命令不是一个操作符命令。它等待你键入下一个字符用以替换当前光标下的那个字符。r命令前辍以一个命令记数是将多个字符都替换为即将输入的那个字符。要把一个字符替换为一个换行符使用r。它会删除一个字符并插入一个换行符。在此处使用命令记数只会删除指定个数的字符：4r将把4个字符替换为一个换行符。 重复改动.命令会重复上一次做出的改动。.命令会重复你做出的所有修改，除了u命令CTRL-R和以冒号开头的命令。.需要在Normal模式下执行，它重复的是命令，而不是被改动的内容， Visual模式按v可以进入Visual模式。移动光标以覆盖你想操纵的文本范围。同时被选中的文本会以高亮显示。最后键入操作符命令。 移动文本以d或x这样的命令删除文本时，被删除的内容还是被保存了起来。你还可以用p命令把它取回来。P命令是把被去回的内容放在光标之前，p则是放在光标之后。对于以dd删除的整行内容，P会把它置于当前行的上一行。p则是至于当前行的后一行。也可以对命令p和P命令使用命令记数。它的效果是同样的内容被取回指定的次数。这样一来dd之后的3p就可以把被删除行的3 份副本放到当前位置。命令xp将光标所在的字符与后一个字符交换。 复制文本（VIM编辑器内复制）y操作符命令会把文本复制到一个寄存器3中。然后可以用p命令把它取回。因为y是一个操作符命令，所以你可以用yw来复制一个word. 同样可以使用命令记数。如下例中用y2w命令复制两个word，yy命令复制一整行，Y也是复制整行的内容，复制当前光标至行尾的命令是y$。 文本对象diw 删除当前光标所在的word(不包括空白字符)daw 删除当前光标所在的word(包括空白字符) 快捷命令x 删除当前光标下的字符(“dl”的快捷命令)X 删除当前光标之前的字符(“dh”的快捷命令)D 删除自当前光标至行尾的内容(“d$”的快捷命令)dw 删除自当前光标至下一个word的开头db 删除自当前光标至前一个word的开始diw 删除当前光标所在的word(不包括空白字符)daw 删除当前光标所在的word(包括空白字符)dG 删除当前行至文件尾的内容dgg 删除当前行至文件头的内容如果你用c命令代替d这些命令就都变成更改命令。使用y就是yank命令，如此类推。 编辑另一个文件用命令:edit foo.txt，也可简写为:e foo.txt。 文件列表可以在启动Vim时就指定要编辑多个文件，用命令vim one.c two.c three.c。Vim将在启动后只显示第一个文件，完成该文件的编辑后，可以用令：:next或:n要保存工作成果并继续下一个文件的编辑，命令：:wnext或:wn可以合并这一过程。 显示当前正在编辑的文件用命令:args。 移动到另一个文件用命令:previous :prev回到上一个文件,合并保存步骤则是:wprevious :wprev。要移到最后一个文件:last,到第一个:first.不过没有:wlast或者:wfirst这样的命令。可以在:next和:previous命令前面使用一个命令计数。 编辑另一个文件列表不用重新启动Vim，就可以重新定义一个文件列表。命令:args five.c six.c seven.h定义了要编辑的三个文件。 自动存盘命令:set autowrite,set aw。自动把内容写回文件: 如果文件被修改过，在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行。命令:set autowriteall,set awa。和autowrite类似，但也适用于:edit、:enew、:quit、:qall、:exit、:xit、:recover 和关闭 Vim 窗口。置位本选项也意味着 Vim 的行为就像打开autowrite一样。 切换到另一文件要在两个文件间快速切换，使用CTRL-^。 文件标记以大写字母命名的标记。它们是全局标记，它们可以用在任何文件中。比如，正在编辑fab1.Java,用命令50%mF在文件的中间设置一个名为F的标记。然后在fab2.java文件中，用命令GnB在最后一行设置名为B的标记。在可以用F命令跳转到文件fab1.java的半中间。或者编辑另一个文件，&#39;B命令会再把你带回文件fab2.java的最后一行。要知道某个标记所代表的位置是什么，可以将该标记的名字作为marks命令的参数:marks M或者连续跟上几个参数:marks MJK。可以用CTRL-O和CTRL-I可以跳转到较早的位置和靠后的某位置。 查看文件仅是查看文件，不向文件写入内容，可以用只读形式编辑文件。用命令：vim -R file。如果是想强制性地避免对文件进行修改，可以用命令：vim -M file。 更改文件名将现有文件存成新的文件，用命令:sav(eas) move.c。如果想改变当前正在编辑的文件名，但不想保存该文件，就可以用命令:f(ile) move.c。 分割一个窗口打开一个新窗口最简单的办法就是使用命令:split。CTRL-W命令可以切换当前活动窗口。 关闭窗口用命令close，可以关闭当前窗口。实际上,任何退出文件编辑的命令:quit和ZZ都会关闭窗口，但是用:close可以阻止你关闭最后一个Vim，以免以意外地整个关闭了Vim。 关闭除当前窗口外的所有其他窗口用命令:only,关闭除当前窗口外的所有其它窗口。如果这些窗口中有被修改过的，你会得到一个错误信息，同时那个窗口会被留下来。 为另一个文件分隔出一个窗口命令:split two.c可以打开第二个窗口同时在新打开的窗口中开始编辑作为参数的文件。如果要打开一个新窗口并开始编辑一个空的缓冲区，使用命令:new。 垂直分割用命令:vsplit或:vsplit two.c。同样有一个对应的:vnew命令，用于垂直分隔窗口并在其中打开一个新的空缓冲区。 切换窗口CTRL-W h 到左边的窗口CTRL-W j 到下面的窗口CTRL-W k 到上面的窗口CTRL-W l 到右边的窗口CTRL-W t 到顶部窗口CTRL-W b 到底部窗口 针对所有窗口操作的命令:qall放弃所有操作并退出，:wall保存所有，:wqall保存所有并退出。上面的这几个命令可以缩写为:q，:w，:wq。 为每一个文件打开一个窗口使用-o选项可以让Vim为每一个文件打开一个窗口vim -o one.txt two.txt three.txt。 使用vimdiff查看不同vimdiff main.c~ main.c,另一种进入diff模式的办法可以在Vim运行中操作。编辑文件main.c，然后打开另一个分隔窗口显示其不同::edit main.c:vertical diffpatch main.c.diff。 页签命令:tabe(dit) thatfile在一个窗口中打开thatfile，该窗口占据着整个的Vim显示区域。命令:tab split/new结果 最后贴2张Vim的命令大全图，可以留着当壁纸，时不时看几眼，没准就都记住了呢～ 4. Vim的终极配置vim是一个开放性很强的编辑器，个性化定制很丰富，你可以创建一个完全自我定制的vimrc，然后自己选择一些插件安装。不过，我推荐一个高度定制好的vim配置，正在使用的，它不一定是完美的，但的确是一款好用的。那就是spf13-vim，它的官方地址是： spf13-vim官网 spf13-vim的GitHUb仓库地址 这两个地址，都有详细的安装介绍，我就不多说了，打字受累，大家可以参考介绍，搭建你自己的vim终极配置！ 5. Vim使用时遇到过的问题及处理方法（持续更新祝大家使用Vim更加爽快～！在编程的道路上越走越远～！ 致谢： 令狐葱@前端笔记 吴润的知乎专栏：cs专业那些事 vim常用命令总结 （转)]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo框架+Apollo主题搭建博客]]></title>
    <url>%2F2018%2F02%2F14%2F%E4%BD%BF%E7%94%A8Hexo%E6%A1%86%E6%9E%B6-Apollo%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言时间过得贼快啊！我一下子就要大二下学期了！想着自己以后大概率就是一名老实的程序员。按着这个程序猿们的习惯啊，一般都会有个自己的博客，也不论是追求技术还是跟风吧，我脑子一热呢，就准备搭一个自己的Blog。 脑子热的时候是2月11号晚上，然后既然热了，那就行动呗。先google了一下个人博客的主流框架和搭建入门咯。最后还是放弃了Wordpress，选择了Hexo来搭建，原因是Hexo开源，主题选择丰富，emmmm就酱。关于为啥选择apollo主题呢，主要是有天瞎逛时，误入了phoenixlzx巨巨的blog，他用的就是Apollo主题。我定睛一看，这就是我想要的滑板鞋主题！ Apollo主题的开发者据说是一位92年的小哥哥，开发Apollo的时候在美团前端任职，现在根据他的GitHub主页应该是在Alipay工作了。我选择Apollo主题的原因是因为它风格简约，我觉得浏览时加载体验比博客华丽的外观会重要很多，你想想等加载是很烦躁的一件事（嗯，至少来说我是这样…），何况Apollo还简约得好看一匹，果断Mark。如下图。 嗯！真的很耐看！清新，简约，Nice！ 既然选择好了框架+主题，就进入正式阶段（以下一切安装代码，在OS X无问题，Windows可能会要稍作修改）。 1. 安装Hexo因为Hexo是一款基于Node.js的静态博客框架，生成静态网页托管在GitHub。所以我们在安装Hexo前得先装上Node.js和git。 1.1 安装Node.js 下载Node.js 安装Node.js 1.2 安装git 下载git（可能会有墙的限制，请翻墙|在网盘or网站CSDN上都可以找到离线包） 安装git 配置自己的git（重要：别忘了这步） 1.3 安装Hexo因为已经装好了Node.js环境了，所以可以使用npm命令。 使用npm命令安装Hexo，输入：12345$ npm install -g hexo-cli or$ npm install -g hexo 如果收到error，在命令行首加上sudo。 初始化博客找到你要放置博客的根目录（推荐建立一个文件夹用来放置，强迫症必须不得不这么干），建好了我们就开始初始化，比如我们已经了创建了一个名为blog的文件夹程序员最好不要创造出有中文的路径吧。 1$ hexo init blog 常规操作接下来搭个静态界面，看看预期，满足下心脏。 1234$ cd blog #切到blog文件夹下$ npm install $ hexo g$ hexo s 按照正常操作，这时候命令行会抛出一个链接http://localhost:4000/，你复制这串网址粘贴到浏览器打开，不出错误的话，会看到第一个由Hexo框架搭建的网页。如果这时候，你没看到or失败了，可能需要google一下。 接着，普及一下Hexo框架的基本操作和作用 hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件 hexo server (hexo s) 启动本地web服务，用于博客的预览 hexo deploy (hexo d) 部署博客到远端（比如github平台） hexo clean 清除缓存 你还会用到1234$ hexo new &quot;postName&quot; #新建博客的文章$ hexo new page &quot;pageName&quot; #新建博客的页面$ hexo g &amp;&amp; hexo d #生成部署$ hexo s #生成本地预览 我写这篇文章时的本地环境，你可以参考一下（使用hexo -v查看，我使用的是OS X系统搭建）12345678910111213141516hexo: 3.5.0hexo-cli: 1.0.4os: Darwin 17.2.0 darwin x64http_parser: 2.7.0node: 8.9.4v8: 6.1.534.50uv: 1.15.0zlib: 1.2.11ares: 1.10.1-DEVmodules: 57nghttp2: 1.25.0openssl: 1.0.2nicu: 59.1unicode: 9.0cldr: 31.0.1tz: 2017b 2. apollo主题配置2.1 安装1234$ cd Blog $ npm install$ npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive$ git clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo 2.2 启用修改_config.yml的theme配置项为apollo1234567theme: apolloarchive_generator: per_page: 0 yearly: false monthly: false daily: false 2.3 测试1$ hexo s 浏览器打开http://localhost:4000/，看有没有出现apollo标准样式博客，如果没有成功，请自行Google查错。 2.4 更新12$ cd themes/apollo $ git pull 3. 托管到GitHub + 链接个人域名3.1 基本准备 GitHub账户一个 一个自定义域名（从阿里云，腾讯云等都可以购买，自带解析服务，推荐；当然也可以选择国外网站，不过国内访问速度可能会稍差一点） 我默认你会基本git和GitHub操作，嗯！如果不会，请移步廖雪峰老师的git教程。 3.2 托管步骤我们利用GitHub Pages来介绍托管在GitHub的项目。由于GitHub Pages的空间免费稳定，用来做搭建一个博客再好不过了。 如何搭建一个独立博客——简明Github Pages与Hexo教程 上面这篇博文详细的介绍了ssh key的获取和链接，介绍了GitHub Pages上面搭建Hexo博客的步骤. 关键点： 3.2.1 设置ssh-key 配置 SSH keys 我们如何让本地 git 项目与远程的 GitHub 建立联系呢？用 SSH keys。 检查 SSH keys的设置 首先我们需要检查电脑上是否已有ssh key： 1$ cd ~/.ssh 检查本机的ssh密钥 如果提示的是No such file or directory，说明你是第一次在本机上使用，需要创建一个。 生成新的 SSH Key 123$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就OK&gt; 此处的邮箱地址，推荐使用你的GitHub账户邮箱 此处的「-C」的是大写的「C」 然后系统会要你输入密码： 12$ Enter passphrase (empty for no passphrase):&lt;输入密码&gt;$ Enter same passphrase again:&lt;再次输入密码&gt; 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。 其实没必要设置，完全可以敲两下回车；当然设置也没有关系 注意：输入密码的时候没有 * 字样的，你直接输入就可以了。（我个人觉得git还可以完善的一个细节） 最后看到这样的界面，就成功设置ssh key了： 3.2.2 添加ssh key到GitHub在本机设置 SSH Key 之后，需要添加到 GitHub上，以完成 SSH 链接的设置。 1、打开本地 id_rsa.pub 文件（如：/Users/fuujiro/.ssh/id_rsa.pub）。此文件里面内容为刚才生成的密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。 2、登陆 GitHub 系统。点击右上角的Account Settings—&gt;SSH Public keys—&gt;add another public keys 把你本地生成的密钥复制到里面（key文本框中）， 点击add key就ok了 3.2.3 测试可以输入下面的命令，看看设置是否成功，git@GitHub.com 的部分不要修改：1$ ssh -T git@GitHub.com 按道理会显示下面的反馈：123The authenticity of host &apos;GitHub.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 输入yes就ok，按道理会显示：1Hi （你的GitHub名字）! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 恭喜你！SSH Key 配置成功！本机已成功连接到 GitHub。 当然，比较倒霉。如果没按道理，大部分可能是墙的原因，你可能需要ping git@GitHub.com拿d到IP地址，然后在/hosts里添加上这个解析。请自行Google解决这个little issue 一个常见错误：GitHub Help - Error Permission denied (publickey) 3.3 将独立域名与 GitHub Pages 的空间绑定 DNS设置 or 域名解析我用的腾讯云的控制台，找到域名，点一下右侧的解析按钮即可解决。阿里云买的域名也可以由阿里云解析。这里也可以使用DNSpod，注册一个账户，即可解析域名了，但应该仅限于解析国内域名。国外的域名，如GoDaddy，请上GoDaddy自行修改DNS。 如何设置DNS 主要有以下几项设置需要填写（以域名fuujiro.com为例）： 主机记录 www：解析后的域名为 www.fuujiro.com @：直接解析主域名 fuujiro.com ：泛解析，匹配其他所有域名 `.fuujiro.com` mail：将域名解析为 mail.fuujiro.com，通常用于解析邮箱服务器 二级域名：如blog.fuujiro.com，填写blog 手机网站：m.fuujiro.com，填写m 记录类型 A：将域名指向云服务器，请选择「A」； CNAME：将域名指向另一个域名，请选择「CNAME」； MX：建立邮箱请选择「MX」，根据邮箱服务商提供的MX记录填写。 记录值：填写需要链接的那个域名，如：fuujiro.github.io 例：如果我们需要把fuujiro.github.io和blog.fuujiro.com链接，主机记录：blog，记录类型：CNAME，记录值：fuujiro.github.io。 然后在你的博客根目录下，找到/source文件夹，进入文件夹，创建一个无格式的名为CNAME的文本文件，文件里填好blog.fuujiro.com（你的个人域名） 测试浏览器打开你的个人域名如blog.fuujiro.com，查看是否加载出页面，如果成功！恭喜你啊，你所有步骤基本完成，尽情地享受你的个人blog，开始码代码吧！頑張って！ 4.后记本来情人节当晚，我就完成了blog的全部搭建我就准备开始写这篇文章了，emmmm也就是昨晚了，结果写着写着就困了，就睡觉去了知道我为什么这么菜了吧我真的很懒。然后今天白天，按着假期规律呗，中午11点多起床，码了几行字，然后吃饭陪我爸聊天，买衣服，陪弟弟放鞭炮在大年三十完成这篇文章的flag就倒了，无情地倒下了！ 不过我没有放弃，继续加油，还是在大年初一，emmmm完结了这篇blog！也谢谢你看到这里，祝你在狗年新年快乐～万事如意！狗年不再出bug！！hahah~ 致谢： 令狐葱@前端笔记 吴润的知乎专栏：cs专业那些事]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown简单语法入门]]></title>
    <url>%2F2018%2F02%2F14%2FMarkdown%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。]]></content>
  </entry>
</search>
